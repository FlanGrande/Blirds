[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[sub_resource type="SpatialMaterial" id=1]
params_specular_mode = 3
anisotropy_enabled = true
anisotropy = 1.0
distance_fade_mode = 3
distance_fade_min_distance = 1024.0
distance_fade_max_distance = 2048.0

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_lambert;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform vec4 water_color : hint_color = vec4(0.0, 0.3, 0.93, 1.0);
uniform vec4 sand_color : hint_color = vec4(0.98, 0.95, 0.48, 1.0);
uniform vec4 grass_color : hint_color = vec4(0.23, 0.7, 0.19, 1.0);
uniform vec4 snow_color : hint_color = vec4(0.87, 0.87, 0.87, 0.87);
uniform float water_color_height = 0.0;
uniform float sand_color_height = 6.0;
uniform float grass_color_height = 40.0;
uniform float snow_color_height = 80.0;

varying flat vec3 out_color;

vec3 lerpColor(vec4 a, vec4 b, float t)
{
	float rr = a.r + (b.r - a.r) * t;
	float gg = a.g + (b.g - a.g) * t;
	float bb = a.b + (b.b - a.b) * t;
	return vec3(rr, gg, bb);
}

void vertex()
{
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	out_color = vec3(water_color.r, water_color.g, water_color.b);
	
	float animated_water_color_height = water_color_height * (cos(TIME) + 1.0);
	float animated_sand_color_height = sand_color_height * (sin(TIME) + 1.0);
	float animated_grass_color_height = grass_color_height * (cos(TIME) + 1.0);
	float animated_snow_color_height = snow_color_height * (sin(TIME) + 1.0);
	
	if(VERTEX.y < animated_water_color_height)
	{
		out_color = vec3(water_color.r, water_color.g, water_color.b);
	}
	else
	{
		if(VERTEX.y < animated_sand_color_height)
		{
			float weight = VERTEX.y / (water_color_height + (sand_color_height - water_color_height)) + 0.0;
			out_color = lerpColor(water_color, sand_color, clamp(weight, 0.0, 1.0));
		}
		else
		{
			if(VERTEX.y < animated_grass_color_height)
			{
				float weight = VERTEX.y / (sand_color_height + (grass_color_height - sand_color_height)) + 1.0;
				out_color = lerpColor(sand_color, grass_color, clamp(weight, 0.0, 1.0));
			}
			else
			{
				if(VERTEX.y < animated_snow_color_height)
				{
					float weight = VERTEX.y / (grass_color_height + (snow_color_height - grass_color_height)) + 1.0;
					out_color = lerpColor(grass_color, snow_color, clamp(weight, 0.0, 1.0));
				}
				else
				{
					out_color = vec3(snow_color.r, snow_color.g, snow_color.b);
				}
			}
		}
	}
}

void fragment()
{
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = out_color * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}"

[resource]
next_pass = SubResource( 1 )
shader = SubResource( 2 )
shader_param/albedo = null
shader_param/specular = null
shader_param/metallic = null
shader_param/roughness = null
shader_param/point_size = null
shader_param/metallic_texture_channel = null
shader_param/roughness_texture_channel = null
shader_param/uv1_scale = null
shader_param/uv1_offset = null
shader_param/uv2_scale = null
shader_param/uv2_offset = null
shader_param/water_color = Color( 0.231373, 0.827451, 0.270588, 1 )
shader_param/sand_color = Color( 0.945098, 0.482353, 0.984314, 1 )
shader_param/grass_color = Color( 0.305882, 1, 1, 1 )
shader_param/snow_color = Color( 0.968627, 0.988235, 0.337255, 1 )
shader_param/water_color_height = 80.0
shader_param/sand_color_height = 86.0
shader_param/grass_color_height = 120.0
shader_param/snow_color_height = 180.0
